Create an interactive game named "Rick & Morty Quiz Game" in javascript. This game uses a public API for generating the question:
1. First, fetch all characters from the API using GET: https://rickandmortyapi.com/api/character. Each response looks like this:
{
  "info": {
    "count": 826,
    "pages": 42,
    "next": "https://rickandmortyapi.com/api/character?page=2",
    "prev": null
  },
  "results": [
    {
      "id": 1,
      "name": "Rick Sanchez",
      "status": "Alive",
      "species": "Human",
      "type": "",
      "gender": "Male",
      "origin": {
        "name": "Earth (C-137)",
        "url": "https://rickandmortyapi.com/api/location/1"
      },
      "location": {
        "name": "Citadel of Ricks",
        "url": "https://rickandmortyapi.com/api/location/3"
      },
      "image": "https://rickandmortyapi.com/api/character/avatar/1.jpeg",
      "episode": [
        "https://rickandmortyapi.com/api/episode/1",
	...            ],
      "url": "https://rickandmortyapi.com/api/character/1",
      "created": "2017-11-04T18:48:46.250Z"
    }],
    ...
2. You're probably interested in the results array. Then you can parse the character name (name), species (human), status (alive), image (image) from the items.
3. Create a quiz game with 10 questions. "Who is the character?" Show an image and provide 4 options.
3. Show a progress bard and keep track of the user's score out of 10.
4. Add feedback on correct/incorrect answers below the quiz as well.
6. After game ends, display a final score and message at the end of the quiz. Message could be dynamic based on the score. Also add a play again button.
7. Make sure the layout is centered and responsiveness is optional. While you're fetching the data from API, show a loading spinner using CSS with a message - "Talking to Rick to fetch information...".
8. Store the API response for future play again rounds.
